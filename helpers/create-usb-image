#!/bin/bash -ex
# -*- mode: Shell-script; sh-basic-offset: 2; indent-tabs-mode: nil -*-
. "${EIB_BASELIB}"

# Create a USB image for booting Endless OS, with data readable from other
# operating systems in a shared exfat partition. This partition is populated
# with files located in "${EIB_USB_IMAGE_WORKSPACE_DIR}".

launcher_url=$(
  curl -sSL https://api.github.com/repos/endlessm/windows-usb-launcher/releases/latest |
  jq -r '.assets[] | select(.name == "Endless.Launcher.exe") | .browser_download_url'
)
create_usb_image_tmp_dir="${EIB_TMPDIR}/create-usb-image"

cleanup_devices() {
  if [ -n "${usb_image_loop}" ]; then
    eib_delete_loop "${usb_image_loop}"
  fi
  unset usb_image_loop
}

cleanup() {
  cleanup_devices || :
  rm -rf "${create_usb_image_tmp_dir}"
}
trap cleanup EXIT

download_file() {
  local url=${1:?No url supplied to ${FUNCNAME}}
  local output=${2:?No output supplied to ${FUNCNAME}}
  if [ -e "${output}" ]; then
    curl -L --output "${output}" --time-cond "${output}" "${url}"
  else
    curl -L --output "${output}" "${url}"
  fi
}

# Write a bootable USB image containing Endless OS, Windows tool and extra
# files.
create_usb_image() {
  local version=${1:?No OS version for ${FUNCNAME}}
  shift
  local out_img=${1:?No target filename ${FUNCNAME}}
  shift

  if [ "$#" -gt 0 ]; then
    local has_img=1
    local src_img=${1:?No source image supplied to ${FUNCNAME}}
    shift
    local boot_zip=${1:?No boot.zip supplied to ${FUNCNAME}}
    shift
    local src_img_csum=${1:?No image checksum supplied to ${FUNCNAME}}
    shift
    local boot_zip_csum=${1:?No boot.zip checksum supplied to ${FUNCNAME}}
    shift
    local src_img_asc=${1:?No image signature supplied to ${FUNCNAME}}
    shift
    local boot_zip_asc=${1:?No boot.zip signature supplied to ${FUNCNAME}}
    shift
    local src_img_name=$(basename "${src_img}")
  fi

  local out_img_name=$(basename "${out_img}")

  local downloads_dir="${EIB_CONTENTDIR}/create-usb-image-downloads"
  mkdir -p "${downloads_dir}"

  # Copy Windows launcher
  download_file "${launcher_url}" "${downloads_dir}/Endless Launcher.exe"

  # Trim duplication of product name from personality name (eg fnde_aluno)
  local personality=${EIB_PERSONALITY#${EIB_PRODUCT}_}

  truncate -s ${EIB_USB_SIZE} "${out_img}"
  usb_image_loop=$(losetup --show -f "${out_img}")

  local default_label="${EIB_IMAGE_PRODUCT_NAME} ${version} ${personality}"

  local write_live_image_args=(
    "--label"
    "${EIB_USB_LABEL:-$default_label}"
    "--windows-tool"
    "${downloads_dir}/Endless Launcher.exe"
  )

  while IFS= read -r -d '' path; do
    write_live_image_args+=("--extra-data" "$path")
  done < <(find "${EIB_USB_IMAGE_WORKSPACE_DIR}" -mindepth 1 -maxdepth 1 -print0)

  if [ -n "${has_img}" ]; then
    write_live_image_args+=(
      "--no-bios"
      "--persistent"
      "--free-space"
      "${EIB_USB_FREE_SPACE:-100}"
    )
    # eos-write-live-image expects to find the image, boot.zip and
    # associated signatures and checksums in the same directory, so create
    # a temporary directory with all of these files.
    mkdir -p "${create_usb_image_tmp_dir}"
    ln -sf -t "${create_usb_image_tmp_dir}" \
      "${src_img}" "${src_img_csum}" "${src_img_asc}" \
      "${boot_zip}" "${boot_zip_csum}" "${boot_zip_asc}"
    eos-write-live-image --force "${write_live_image_args[@]}" "${create_usb_image_tmp_dir}/${src_img_name}" "${usb_image_loop}"
  else
    "${EIB_HELPERSDIR}"/eos-write-live-image-data-only --force "${write_live_image_args[@]}" "${usb_image_loop}"
  fi

  cleanup_devices

  sign_file "${out_img}" &
  checksum_file "${out_img}" &
  local out_img_size=$(stat -c "%s" "${out_img}")

  local out_zimg="${out_img}.${EIB_IMAGE_COMPRESSION}"
  eib_compress_image "${out_img}" "${out_zimg}" &
  wait

  sign_file "${out_zimg}" &
  checksum_file "${out_zimg}" &
  local out_zimg_size=$(stat -c "%s" "${out_zimg}")
  local out_zimg_signature=$(basename "${out_zimg}.asc")
  local out_zimg_checksum=$(basename "${out_zimg}.sha256")
  wait

  # Remove uncompressed image.
  rm -f "${out_img}"

  # Generate USB image manifest information
  cat > "${EIB_MANIFESTDIR}"/usb_image.json <<EOF
{
  "images": {
    "usb_image": {
      "file": "${out_img_name}",
      "extracted_size": ${out_img_size},
      "compressed_size": ${out_zimg_size},
      "compression_type": "${EIB_IMAGE_COMPRESSION}",
      "signature": "${out_zimg_signature}",
      "checksum": "${out_zimg_checksum}"
    }
  }
}
EOF
}

# Run main function for this image.
create_usb_image "$@"
