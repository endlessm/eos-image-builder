#!/bin/bash -ex
# -*- mode: Shell-script; sh-basic-offset: 2; indent-tabs-mode: nil -*-
. "${EIB_BASELIB}"

# Write a bootable ISO image containing the image file, Windows tool and other
# files needed to install Endless OS in every supported configuration.
create_iso() {
  local version=${1:?No OS version for $FUNCNAME}
  shift
  local iso=${1:?No target filename $FUNCNAME}
  shift
  local img=${1:?No image supplied to $FUNCNAME}
  shift
  local boot_zip=${1:?No boot.zip supplied to $FUNCNAME}
  shift
  local img_csum=${1:?No image checksum supplied to $FUNCNAME}
  shift
  local boot_zip_csum=${1:?No boot.zip checksum supplied to $FUNCNAME}
  shift

  local ISO_TMPDIR="$EIB_TMPDIR/iso"
  local DIR_EFI="$ISO_TMPDIR/efi"
  local DIR_IMAGES="$ISO_TMPDIR/images"
  local DIR_ESP="$ISO_TMPDIR/esp"
  local DIR_IMAGES_ENDLESS="${DIR_IMAGES}/endless"
  mkdir -p "$DIR_EFI" "$DIR_ESP" "$DIR_IMAGES_ENDLESS"

  ln "$boot_zip" "${DIR_IMAGES_ENDLESS}/$(basename "$boot_zip")"
  ln "$img_csum" "${DIR_IMAGES_ENDLESS}/$(basename "$img_csum")"
  ln "$boot_zip_csum" "${DIR_IMAGES_ENDLESS}/$(basename "$boot_zip_csum")"

  # Link img.asc, boot.zip.asc into ISO tree if they exist. During manual
  # testing, the GPG key may not be available in which case no signatures will
  # be generated -- allow that here.
  for i in "$@"; do
    if [ -e "$i" ]; then
      ln "$i" "${DIR_IMAGES_ENDLESS}/$(basename "$i")"
    fi
  done

  echo -n "${EIB_OUTVERSION}.img" > "${DIR_IMAGES_ENDLESS}/live"

  # Trim duplication of product name from personality name (eg fnde_aluno)
  personality=${EIB_PERSONALITY#${EIB_PRODUCT}_}

  # Set label for ISO - including the personality name "bare" is not ideal
  # but generally speaking we are limited to 32 characters, and the image
  # builder is unaware of localised personality names
  label="${EIB_IMAGE_PRODUCT_NAME} ${version} ${personality}"

  # TODO: Perhaps we should create a package in OBS which just contains
  # endless-installer.exe?
  local ei_url="https://images-dl.endlessm.com/endless-installer/endless-installer.exe"
  local ei_exe="${DIR_IMAGES}/endless-installer.exe"
  wget -O "${ei_exe}" "${ei_url}"

  # This is for Windows' benefit, so it should be in utf-16 with CRLF line endings
  sed 's/$/\r/' <<AUTORUN_INF | iconv -f utf-8 -t utf-16 > "${DIR_IMAGES}/autorun.inf"
[AutoRun]
label=${label}
icon=endless-installer.exe
open=endless-installer.exe

[Content]
MusicFiles=false
PictureFiles=false
VideoFiles=false
AUTORUN_INF

  # Publish size of image inside the ISO (& squashfs). This is the interesting
  # number that can't be easily determined from the size of the ISO itself.
  # We will delete $img after creating the squashfs to reduce
  # peak disk usage, so we need to determine its size beforehand.
  local img_size=$(stat -c "%s" "${img}")
  echo "${img_size}" > "${iso}.size"

  local squashfs_comp=gzip
  if [ "${EIB_IMAGE_COMPRESSION}" == "xz" ]; then
    squashfs_comp=xz
  fi

  # Create squashfs containing just $img, under the name endless.img
  ln "$img" "${DIR_IMAGES_ENDLESS}/endless.img"
  local squash="${DIR_IMAGES_ENDLESS}/endless.squash"
  mksquashfs "${DIR_IMAGES_ENDLESS}/endless.img" "${squash}" \
    -comp $squashfs_comp \
    -b 131072
  rm -f "${DIR_IMAGES_ENDLESS}/endless.img"

  # At this point, the raw image is no longer needed for the ISO
  # creation, but we need to keep it for now in case other assets need
  # to be created from it.

  local squash_asc="${DIR_IMAGES_ENDLESS}/${EIB_OUTVERSION}.squash.asc"
  local squash_csum="${DIR_IMAGES_ENDLESS}/${EIB_OUTVERSION}.squash.sha256"
  sign_file "$squash" "$squash_asc" &
  checksum_file "$squash" "$squash_csum" &
  wait

  # Construct ESP
  unzip -q -d "${DIR_EFI}" "${boot_zip}" "EFI/*"
  local DIR_EFI_SIZE=$(du -s "${DIR_EFI}" | cut -f1)
  local ESP_SIZE=$(( (DIR_EFI_SIZE + 1024) / 1024 * 1024 ))

  # Create ESP and copy the EFI content
  truncate -s ${ESP_SIZE}K "${DIR_ESP}/efi.img"
  mkdosfs "${DIR_ESP}/efi.img"
  mcopy -s -i "${DIR_ESP}/efi.img" "${DIR_EFI}/EFI" '::/'

  # Unpack generic and ISO-specific GRUB files
  unzip -q -d "${DIR_IMAGES_ENDLESS}" "${boot_zip}" "grub/*"
  unzip -q -d "${DIR_IMAGES_ENDLESS}/grub/i386-pc/" "${boot_zip}" "iso/*"

  local VOLID=$(echo -n "$label" | tr -cs 'A-Za-z0-9_' '-')

  # Generate the ISO image.
  # Parameters found using https://dev.lovelyhq.com/libburnia/libisoburn/raw/master/frontend/grub-mkrescue-sed.sh
  #
  # export MKRESCUE_SED_MODE=mbr_only
  # export MKRESCUE_SED_PROTECTIVE=no
  # export MKRESCUE_SED_DEBUG=yes
  #
  # grub-mkrescue -o output.iso minimal_directory --xorriso=grub-mkrescue-sed.sh

  xorriso -as mkisofs \
          -o "${iso}" \
          -r -graft-points -no-pad \
          --sort-weight 0 / \
          --sort-weight 1 /endless \
          -b endless/grub/i386-pc/iso/eltorito.img \
          -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \
          --grub2-mbr "${DIR_IMAGES_ENDLESS}/grub/i386-pc/iso/boot_hybrid.img" \
          -eltorito-alt-boot \
          -e --interval:appended_partition_2:all:: \
          -no-emul-boot \
          -append_partition 2 0xef "${DIR_ESP}/efi.img" \
          -iso-level 3 \
          -joliet -joliet-long \
          -volid "${VOLID::32}" \
          -publisher 'Endless OS Foundation LLC' \
          "${DIR_IMAGES}"

  # Change partition type from 0x83 to 0x00
  printf "\x00" | dd of="${iso}" bs=1 count=1 seek=450 conv=notrunc

  # Clean up!
  rm -fr "${ISO_TMPDIR}"

  if [ "${EIB_ISO_MAX_SIZE}" ]; then
    local iso_size=$(stat --printf='%s' "${iso}")
    if [ "${iso_size}" -gt "${EIB_ISO_MAX_SIZE}" ]; then
      local excess=$(( "${iso_size}" - "${EIB_ISO_MAX_SIZE}" ))
      echo "ERROR: ${iso} is ${iso_size} bytes," \
        "${excess} bytes above limit of ${EIB_ISO_MAX_SIZE} bytes" >&2
      return 1
    fi
  fi

  # Sign and checksum ISO
  sign_file "${iso}" &
  checksum_file "${iso}" &
  wait

  # Generate ISO manifest information
  local iso_name=$(basename "${iso}")
  local iso_compressed_size=$(stat -c "%s" "${iso}")
  local iso_signature=$(basename "${iso}.asc")
  local iso_checksum=$(basename "${iso}.sha256")

  cat > "${EIB_MANIFESTDIR}"/iso.json <<EOF
{
  "images": {
    "iso": {
      "file": "${iso_name}",
      "extracted_size": ${img_size},
      "compressed_size": ${iso_compressed_size},
      "compression_type": "iso+squashfs",
      "signature": "${iso_signature}",
      "checksum": "${iso_checksum}"
    }
  }
}
EOF
}

# Run main function for this image.
create_iso "$@"
