#!/usr/bin/python3

# Populate manifest information about flatpak runtimes and
# apps.

from datetime import datetime, timezone
from gi import require_version
import json
import os
import sys

require_version('Flatpak', '1.0')
require_version('OSTree', '1.0')
from gi.repository import Flatpak, GLib, Gio, OSTree  # noqa: E402


def commit_date_string(repo, checksum):
    """Get a formatted timestamp of the commit at checksum"""
    _, commit, _ = repo.load_commit(checksum)
    if sys.byteorder != 'big':
        # The commit variant is stored big endian
        commit = commit.byteswap()
    timestamp = commit[5]
    time = datetime.fromtimestamp(timestamp, timezone.utc)
    return time.strftime('%Y-%m-%dT%H:%M:%S%z')


def write_manifest(data):
    """Write out the json to a fragment"""
    manifestdir = os.environ['EIB_MANIFESTDIR']
    manifest_path = os.path.join(manifestdir, 'flatpak.json')
    print('Writing flatpak manifest info to', manifest_path)
    with open(manifest_path, 'w') as manifest:
        json.dump(data, manifest)


def get_data_for_ref(
    repo: OSTree.Repo,
    installed_ref: Flatpak.InstalledRef,
) -> dict:
    name = installed_ref.get_name()
    arch = installed_ref.get_arch()
    branch = installed_ref.get_branch()
    key = '{}/{}/{}'.format(name, arch, branch)
    remote = installed_ref.get_origin()
    commit = installed_ref.get_commit()
    size = installed_ref.get_installed_size()
    ref = installed_ref.format_ref()
    date = commit_date_string(repo, commit)
    version = installed_ref.get_appdata_version()

    data = {
        'name': name,
        'arch': arch,
        'branch': branch,
        'remote': remote,
        'commit': commit,
        'size': size,
        'ref': ref,
        'date': date,
        'version': version,
    }

    # TODO: It would be nice to consider EIB_FLATPAK_LOCALES and extract the
    # name and summary in those locales too. Unfortunately while there is
    # internal API to do this easily, it is not exposed by libflatpak.
    appdata_name = installed_ref.get_appdata_name()
    appdata_summary = installed_ref.get_appdata_summary()
    if appdata_name or appdata_summary:
        data['appdata'] = {'C': {}}
        if appdata_name:
            data['appdata']['C']['name'] = appdata_name
        if appdata_summary:
            data['appdata']['C']['summary'] = appdata_summary

    return key, data


def main():
    # Build the json data structure
    data = {
        'flatpak': {
            'remotes': {},
            'runtimes': {},
            'apps': {},
        }
    }

    if os.environ.get('EIB_FLATPAK_ENABLE', 'false') != 'true':
        # Write out an empty manifest so it always exists
        write_manifest(data)
        return

    # Open the flatpak installation in the OS /var/lib/flatpak.
    system_path = os.path.join(os.environ['OSTREE_VAR'], 'lib/flatpak')
    print('Opening flatpak installation in', system_path)
    system_file = Gio.File.new_for_path(system_path)
    system = Flatpak.Installation.new_for_path(system_file, user=False)

    repo_file = system_file.get_child('repo')
    print('Opening ostree repo in', repo_file.get_path())
    repo = OSTree.Repo.new(repo_file)
    repo.open()

    remotes = system.list_remotes()
    for remote in remotes:
        name = remote.get_name()
        url = remote.get_url()
        collection_id = remote.get_collection_id()

        # Skip disabled remotes
        if remote.get_disabled():
            continue

        # Skip local remotes (e.g., external apps)
        if url.startswith('file://'):
            continue

        data['flatpak']['remotes'][name] = {
            'url': url,
            'collection-id': collection_id,
        }

    runtimes = system.list_installed_refs_by_kind(Flatpak.RefKind.RUNTIME)
    for runtime in runtimes:
        key, runtime_data = get_data_for_ref(repo, runtime)
        data['flatpak']['runtimes'][key] = runtime_data

    apps = system.list_installed_refs_by_kind(Flatpak.RefKind.APP)
    for app in apps:
        key, app_data = get_data_for_ref(repo, app)

        metadata = GLib.KeyFile()
        metadata.load_from_bytes(app.load_metadata(), GLib.KeyFileFlags.NONE)
        try:
            runtime = metadata.get_string('Application', 'runtime')
        except GLib.GError:
            runtime = None
        app_data['runtime'] = runtime

        data['flatpak']['apps'][key] = app_data

    # Now write out the json to a fragment
    write_manifest(data)


if __name__ == '__main__':
    main()
