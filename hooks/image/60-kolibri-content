# Populate the Kolibri home directory

if [ -z "${EIB_KOLIBRI_INSTALL_CHANNELS}" ]; then
  exit 0
fi

import_kolibri_channel()
{
  local channel_id=$1
  local channel_include_node_ids_var="EIB_KOLIBRI_${channel_id^^}_INCLUDE_NODE_IDS"
  local channel_exclude_node_ids_var="EIB_KOLIBRI_${channel_id^^}_EXCLUDE_NODE_IDS"
  local importcontent_opts=(
    # By default, importcontent skips content nodes that it doesn't
    # think are renderable. Since we don't know what renderers will be
    # available at runtime, request everything.
    --include-unrenderable-content

    # Normally importcontent ignores download errors. Make it fail so we
    # can be sure we've fully provisioned channels.
    --fail-on-error
  )
  local importcontent_network_opts=(
    # The default timeout is 60 seconds, but downloading can be slow
    # when objects aren't in our content CDN yet.
    --timeout 300
  )

  if [ -n "${!channel_include_node_ids_var}" ]; then
    importcontent_include_nodes=$(echo "${!channel_include_node_ids_var}" | xargs | tr -s ' ' ',')
    importcontent_opts+=(--node_ids="${importcontent_include_nodes}")
  fi

  if [ -n "${!channel_exclude_node_ids_var}" ]; then
    importcontent_exclude_nodes=$(echo "${!channel_exclude_node_ids_var}" | xargs | tr -s ' ' ',')
    importcontent_opts+=(--exclude_node_ids="${importcontent_exclude_nodes}")
  fi

  kolibri manage --skip-update importchannel network "${channel_id}"
  EIB_RETRY_ATTEMPTS=2 EIB_RETRY_INTERVAL=30 eib_retry \
    kolibri manage --skip-update importcontent "${importcontent_opts[@]}" \
    network "${importcontent_network_opts[@]}" "${channel_id}"
}

venv_dir="${EIB_TMPDIR}/kolibri-content-venv"
python3 -m venv ${venv_dir}
source ${venv_dir}/bin/activate

pip install kolibri==${EIB_KOLIBRI_APP_VERSION}
pip install kolibri-app-desktop-xdg-plugin==${EIB_KOLIBRI_APP_DESKTOP_XDG_PLUGIN_VERSION}
pip install kolibri-desktop-auth-plugin==${EIB_KOLIBRI_DESKTOP_AUTH_PLUGIN_VERSION}

export KOLIBRI_HOME="${OSTREE_VAR}"/lib/kolibri/data
rm -rf "${KOLIBRI_HOME}"
mkdir -p "${KOLIBRI_HOME}"

kolibri plugin enable kolibri.plugins.app
kolibri plugin enable kolibri_app_desktop_xdg_plugin
kolibri plugin enable kolibri_desktop_auth_plugin

# Setup the homedir before setting any environment variables so they
# don't persist into the options file.
kolibri configure setup

# Use a separate content URL if configured.
if [ -n "${EIB_KOLIBRI_CENTRAL_CONTENT_BASE_URL}" ]; then
  KOLIBRI_CENTRAL_CONTENT_BASE_URL="${EIB_KOLIBRI_CENTRAL_CONTENT_BASE_URL}"
  export KOLIBRI_CENTRAL_CONTENT_BASE_URL
fi

# Do not create symlinks for static files inside the image builder.
export KOLIBRI_STATIC_USE_SYMLINKS=0

for channel_id in ${EIB_KOLIBRI_INSTALL_CHANNELS}; do
  import_kolibri_channel "${channel_id}"
done

# Sort channels in the same order as in EIB_KOLIBRI_INSTALL_CHANNELS
position=1
for channel_id in ${EIB_KOLIBRI_INSTALL_CHANNELS}; do
  kolibri manage --skip-update setchannelposition ${channel_id} ${position} || true
  let position=position+1
done

# Empty the user database, and ensure that each instance of this image has a
# unique Facility ID.
# <https://kolibri.readthedocs.io/en/latest/install/provision.html#prepare-the-kolibri-folder-for-copying>
(echo yes; echo yes) | kolibri manage --skip-update deprovision
