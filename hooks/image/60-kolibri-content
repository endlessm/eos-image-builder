# Populate the Kolibri home directory

if [ -z "${EIB_KOLIBRI_INSTALL_CHANNELS}" ]; then
  exit 0
fi

import_kolibri_channel()
{
  local channel_id=$1
  local channel_include_node_ids_var="EIB_KOLIBRI_${channel_id^^}_INCLUDE_NODE_IDS"
  local channel_exclude_node_ids_var="EIB_KOLIBRI_${channel_id^^}_EXCLUDE_NODE_IDS"
  local importcontent_opts=()

  if [ -n "${!channel_include_node_ids_var}" ]; then
    importcontent_include_nodes=$(echo "${!channel_include_node_ids_var}" | xargs | tr -s ' ' ',')
    importcontent_opts+=(--node_ids="${importcontent_include_nodes}")
  fi

  if [ -n "${!channel_exclude_node_ids_var}" ]; then
    importcontent_exclude_nodes=$(echo "${!channel_exclude_node_ids_var}" | xargs | tr -s ' ' ',')
    importcontent_opts+=(--exclude_node_ids="${importcontent_exclude_nodes}")
  fi

  kolibri manage importchannel network "${channel_id}"
  kolibri manage importcontent ${importcontent_opts[@]} network "${channel_id}"
}

# Needs to be kept in sync with hooks/image/61-kolibri-content-install
KOLIBRI_CONTENT_DIR="${EIB_CONTENTDIR}/kolibri-content"
# FIXME: For now, we need to remove old content that may exist from previous
# runs to prevent images accidentally getting extra channels that are not in
# their configuration. However, this defeats the purpose of the image builder
# saving the contents of EIB_CONTENTDIR between runs to improve its performance.
# At some point we should revisit this to try to make the caching work properly.
rm -rf "${KOLIBRI_CONTENT_DIR}"
mkdir -p "${KOLIBRI_CONTENT_DIR}"

venv_dir="${EIB_TMPDIR}/kolibri-content-venv"
python3 -m venv ${venv_dir}
source ${venv_dir}/bin/activate

pip install kolibri==${EIB_KOLIBRI_APP_VERSION}
pip install kolibri-app-desktop-xdg-plugin==${EIB_KOLIBRI_APP_DESKTOP_XDG_PLUGIN_VERSION}
pip install kolibri-desktop-auth-plugin==${EIB_KOLIBRI_DESKTOP_AUTH_PLUGIN_VERSION}

export KOLIBRI_HOME="${KOLIBRI_CONTENT_DIR}"

# Disable use of symlinks so we can install the data on filesystems that do not
# support them (exFAT).
cat << EOF > "${KOLIBRI_HOME}"/options.ini
[Deployment]
STATIC_USE_SYMLINKS = 0
EOF
if [ "${EIB_KOLIBRI_DESKTOP_AUTH_PLUGIN_REGULAR_USERS_CAN_MANAGE_CONTENT}" = "true" ]; then
    cat << EOF >> "${KOLIBRI_HOME}"/options.ini
[DesktopAuth]
REGULAR_USERS_CAN_MANAGE_CONTENT = True
EOF
fi

kolibri plugin enable kolibri.plugins.app
kolibri plugin enable kolibri_app_desktop_xdg_plugin
kolibri plugin enable kolibri_desktop_auth_plugin

for channel_id in ${EIB_KOLIBRI_INSTALL_CHANNELS}; do
  import_kolibri_channel "${channel_id}"
done

# Sort channels in the same order as in EIB_KOLIBRI_INSTALL_CHANNELS
position=1
for channel_id in ${EIB_KOLIBRI_INSTALL_CHANNELS}; do
  kolibri manage setchannelposition ${channel_id} ${position} || true
  let position=position+1
done

# Empty the user database, and ensure that each instance of this image has a
# unique Facility ID.
# <https://kolibri.readthedocs.io/en/latest/install/provision.html#prepare-the-kolibri-folder-for-copying>
(echo yes; echo yes) | kolibri manage deprovision
