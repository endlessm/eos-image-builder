# Populate the Endless Key home directory

if [ -z "${EIB_ENDLESSKEY_COLLECTIONS}" ]; then
  exit 0
fi

if [[ ! "${EIB_FLATPAK_REMOTE_FLATHUB_APPS}" =~ .*"org.endlessos.Key".* ]]; then
  exit 0
fi

selected_collection_files=()

channels_file="${EIB_TMPDIR}"/ek-channels
rm -f "${channels_file}"
touch "${channels_file}"
all_collection_files="${OSTREE_VAR}"/lib/flatpak/app/org.endlessos.Key/current/active/files/share/endless-key/collections/*.json
for collection_file in ${all_collection_files}; do
  # Check if the file basename stripped off of -0001.json is part of the list
  # of collections to be installed.
  bn=$(basename "${collection_file%-????.json}")
  if [[ " ${EIB_ENDLESSKEY_COLLECTIONS} "  =~ [[:space:]]${bn}[[:space:]] ]] ; then
    selected_collection_files+=("${collection_file}")
    jq -r '.channels[].id' "${collection_file}" >> "${channels_file}"
  fi
done

all_channels=$(sort -u "${channels_file}")
if [ -z "${all_channels}" ]; then
  echo "No Kolibri channels to preload"
  exit 0
fi

# Seed the needed channels on the content server.
"${EIB_HELPERSDIR}"/seed-kolibri-channels ${all_channels}

venv_dir="${EIB_TMPDIR}/kolibri-content-venv"
python3 -m venv ${venv_dir}
source ${venv_dir}/bin/activate
pip install "${EIB_ENDLESSKEY_KOLIBRI_PKGSPEC}"

# Setup the homedir before setting any environment variables so they
# don't persist into the options file.
export KOLIBRI_HOME="${OSTREE_VAR}"/lib/endless-key/data
mkdir -p "${KOLIBRI_HOME}"
kolibri configure setup

# Use a separate content URL if configured.
if [ -n "${EIB_KOLIBRI_CENTRAL_CONTENT_BASE_URL}" ]; then
  KOLIBRI_CENTRAL_CONTENT_BASE_URL="${EIB_KOLIBRI_CENTRAL_CONTENT_BASE_URL}"
  export KOLIBRI_CENTRAL_CONTENT_BASE_URL
fi

# Import all channel metadata and thumbnails for all channels
for channel in $all_channels; do
  kolibri manage --skip-update importchannel network "${channel}"
  EIB_RETRY_ATTEMPTS=2 EIB_RETRY_INTERVAL=30 eib_retry \
    kolibri manage --skip-update \
    importcontent --include-unrenderable-content --fail-on-error \
    --node_ids="" --all-thumbnails \
    network "${channel}"
done

if [ "${EIB_ENDLESSKEY_INCLUDE_FULL_CHANNELS}" == true ]; then
  for channel in $all_channels; do
    EIB_RETRY_ATTEMPTS=2 EIB_RETRY_INTERVAL=30 eib_retry \
      kolibri manage --skip-update \
      importcontent --include-unrenderable-content --fail-on-error \
      network "${channel}"
  done
else
  for collection_file in "${selected_collection_files[@]}"; do
    collection_channels=$(jq -r '.channels[].id' "${collection_file}")
    for channel in $collection_channels; do
      EIB_RETRY_ATTEMPTS=2 EIB_RETRY_INTERVAL=30 eib_retry \
        kolibri manage --skip-update \
        importcontent --include-unrenderable-content --fail-on-error \
        --manifest="${collection_file}" network "${channel}"
    done
  done
fi

# Empty the user database, and ensure that each instance of this image has a
# unique Facility ID.
# <https://kolibri.readthedocs.io/en/latest/install/provision.html#prepare-the-kolibri-folder-for-copying>
(echo yes; echo yes) | kolibri manage --skip-update deprovision

# Chown all the files to the kolibri user. This also happens at runtime
# via the endless-key.conf tmpfiles.d configuration.
kolibri_uid=$(ostree_uid kolibri)
kolibri_gid=$(ostree_gid kolibri)
chown -R "${kolibri_uid}:${kolibri_gid}" "${OSTREE_VAR}"/lib/endless-key
