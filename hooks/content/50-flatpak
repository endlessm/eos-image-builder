#!/usr/bin/python3 -u

# Pull flatpak apps, appstream and runtimes to a local repository using
# eibflatpak.FlatpakManager.

import eib
import eibflatpak
from gi import require_version
import logging
import os
import sys

require_version('Flatpak', '1.0')
require_version('OSTree', '1.0')
from gi.repository import Flatpak, Gio, OSTree  # noqa: E402

logger = logging.getLogger(os.path.basename(__file__))
eib.setup_logging()
config = eib.get_config()

if not config.getboolean('flatpak', 'enable', fallback=True):
    sys.exit(0)

# Enable debug logging for all flatpak operations
os.environ['G_MESSAGES_DEBUG'] = 'flatpak'

# Create the ostree repository before opening the installation so an
# archive-z2 repo can be used. That saves disk space on the builder
# since the objects won't be able to be checked out anywhere.
repo_path = os.path.join(config['build']['contentdir'], 'flatpak/repo')
repo_file = Gio.File.new_for_path(repo_path)
repo = OSTree.Repo.new(repo_file)
print('Creating flatpak content repo at', repo_path)
os.makedirs(repo_path, exist_ok=True)
repo.create(OSTree.RepoMode.ARCHIVE_Z2)

# Remove any xa.* options in the core config section that might be left
# over from a previous build. FlatpakManager will set any that are
# needed for this build.
removed_options = False
repo_config = repo.copy_config()
core_options, _ = repo_config.get_keys('core')
for opt in core_options:
    if opt.startswith('xa.'):
        logger.info('Removing content repo option core.%s', opt)
        repo_config.remove_key('core', opt)
        removed_options = True
if removed_options:
    repo.write_config(repo_config)

# Open the parent directory as a flatpak installation so the API can be
# used for repo operations
installation_file = repo_file.get_parent()
installation = Flatpak.Installation.new_for_path(installation_file,
                                                 user=False)

manager = eibflatpak.FlatpakManager(installation, config=config,
                                    is_cache_repo=True)
manager.add_remotes()
manager.enumerate_remotes()
manager.pull()

# Prune all but the latest referenced commits. Note that doing the
# pruning now after the pull is the best for downloading since we can
# use all existing objects at the expense of disk space on the builder.
print('Pruning repo')
repo.prune(OSTree.RepoPruneFlags.REFS_ONLY, 0)
